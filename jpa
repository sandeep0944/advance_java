Persistence xml:
<?xml version="1.0" encoding="UTF-8"?>
<persistence xmlns="http://jakarta.ee/xml/ns/persistence" version="3.1">
    <persistence-unit name="EmployeePU">
        <properties>
            <property name="jakarta.persistence.jdbc.driver" value="com.mysql.cj.jdbc.Driver"/>
            <property name="jakarta.persistence.jdbc.url" value="jdbc:mysql://localhost:3306/your_database"/>
            <property name="jakarta.persistence.jdbc.user" value="root"/>
            <property name="jakarta.persistence.jdbc.password" value="your_password"/>
            <property name="jakarta.persistence.jdbc.dialect" value="org.hibernate.dialect.MySQL8Dialect"/>
            <property name="jakarta.persistence.schema-generation.database.action" value="update"/>
            <property name="hibernate.show_sql" value="true"/>
        </properties>
    </persistence-unit>
</persistence>


package com.example.model;

import jakarta.persistence.*;

@Entity
@Table(name = "employees")
public class Employee {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "name")
    private String name;

    @Column(name = "email")
    private String email;

    @Column(name = "salary")
    private double salary;

    // Constructors
    public Employee() {}

    public Employee(String name, String email, double salary) {
        this.name = name;
        this.email = email;
        this.salary = salary;
    }

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public String getEmail() { return email; }
    public void setEmail(String email) { this.email = email; }

    public double getSalary() { return salary; }
    public void setSalary(double salary) { this.salary = salary; }

    @Override
    public String toString() {
        return "Employee [id=" + id + ", name=" + name + ", email=" + email + ", salary=" + salary + "]";
    }
}



package com.example.util;

import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;

public class JPAUtil {
    private static final EntityManagerFactory ENTITY_MANAGER_FACTORY = Persistence.createEntityManagerFactory("EmployeePU");

    public static EntityManagerFactory getEntityManagerFactory() {
        return ENTITY_MANAGER_FACTORY;
    }

    public static void shutdown() {
        ENTITY_MANAGER_FACTORY.close();
    }
}


package com.example.dao;

import com.example.model.Employee;
import com.example.util.JPAUtil;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityTransaction;
import java.util.List;

public class EmployeeDAO {

 
    public void saveEmployee(Employee employee) {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();

        try {
            transaction.begin();
            entityManager.persist(employee);
            transaction.commit();
        } catch (Exception e) {
            if (transaction.isActive()) transaction.rollback();
            e.printStackTrace();
        } finally {
            entityManager.close();
        }
    }

    
    public Employee getEmployee(int id) {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        Employee employee = entityManager.find(Employee.class, id);
        entityManager.close();
        return employee;
    }


    public void updateEmployee(Employee employee) {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();

        try {
            transaction.begin();
            entityManager.merge(employee);
            transaction.commit();
        } catch (Exception e) {
            if (transaction.isActive()) transaction.rollback();
            e.printStackTrace();
        } finally {
            entityManager.close();
        }
    }

  
    public void deleteEmployee(int id) {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        EntityTransaction transaction = entityManager.getTransaction();

        try {
            transaction.begin();
            Employee employee = entityManager.find(Employee.class, id);
            if (employee != null) {
                entityManager.remove(employee);
            }
            transaction.commit();
        } catch (Exception e) {
            if (transaction.isActive()) transaction.rollback();
            e.printStackTrace();
        } finally {
            entityManager.close();
        }
    }


    public List<Employee> getAllEmployees() {
        EntityManager entityManager = JPAUtil.getEntityManagerFactory().createEntityManager();
        List<Employee> employees = entityManager.createQuery("SELECT e FROM Employee e", Employee.class).getResultList();
        entityManager.close();
        return employees;
    }
}
package com.example.main;

import com.example.dao.EmployeeDAO;
import com.example.model.Employee;
import com.example.util.JPAUtil;

import java.util.List;

public class MainApp {
    public static void main(String[] args) {
        EmployeeDAO employeeDAO = new EmployeeDAO();

        
        Employee emp1 = new Employee("Alice Brown", "alice@example.com", 60000);
        Employee emp2 = new Employee("John Doe", "john@example.com", 75000);
        employeeDAO.saveEmployee(emp1);
        employeeDAO.saveEmployee(emp2);

    
        Employee retrievedEmp = employeeDAO.getEmployee(emp1.getId());
        System.out.println("Retrieved Employee: " + retrievedEmp);

        
        retrievedEmp.setSalary(65000);
        employeeDAO.updateEmployee(retrievedEmp);
        System.out.println("Updated Employee: " + employeeDAO.getEmployee(emp1.getId()));

        
        List<Employee> employees = employeeDAO.getAllEmployees();
        System.out.println("All Employees: " + employees);

        
        employeeDAO.deleteEmployee(emp2.getId());
        System.out.println("Employee Deleted");

      
        employees = employeeDAO.getAllEmployees();
        System.out.println("Remaining Employees: " + employees);

        
        JPAUtil.shutdown();
    }
}


<dependencies>
    <dependency>
        <groupId>org.hibernate.orm</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>6.3.1.Final</version>
    </dependency>

    <dependency>
        <groupId>jakarta.persistence</groupId>
        <artifactId>jakarta.persistence-api</artifactId>
        <version>3.1.0</version>
    </dependency>

    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
        <version>8.0.33</version>
    </dependency>
</dependencies>
